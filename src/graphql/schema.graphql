# Hey Emacs, this is -*- coding: utf-8 -*-

"How component comes into existence in Artizanya"
enum ComponentGenesis {
  """
  Native to Artizanya land
  Produced from other Artizanya components.
  """
  NATIVE

  """
  Foreign to Artizanya land
  Acquired from a third party suppler such as shop or manufacturer.
  """
  FOREIGN

  """
  Natural to the universe
  Acquired directly from the nature.
  """
  NATURAL
}

"Role in the project tree"
enum ComponentRole {
  "Part of other components"
  PART

  "Consumable material in components production"
  CONSUMABLE

  "Instrument used in components production"
  INSTRUMENT

  "Byproduct"
  BYPRODUCT

  "Final product"
  FINAL
}

interface Component {
  id: String!
  name: String
  genesis: ComponentGenesis!
  role: ComponentRole!
}

type NativeComponent implements Component {
  id: String!
  name: String
  genesis: ComponentGenesis!
  role: ComponentRole!
  path: String!
}

type ForeignComponent implements Component {
  id: String!
  name: String
  genesis: ComponentGenesis!
  role: ComponentRole!
  vendor: String!
  product: String!
}

type NaturalComponent implements Component {
  id: String!
  name: String
  genesis: ComponentGenesis!
  role: ComponentRole!
  method: String!
}

interface Process {
  id: String!
}

type AssembleProcess implements Process {
  id: String!
  input: [Component]!
  output: [NativeComponent!]!
}

type PurchaseOnlineProcess implements Process {
  id: String!
  store: String!
  output: [Component!]!
}

interface Logistics {
  id: String!
}

type DeliveryOnlineLogistics implements Logistics {
  id: String!
}

"An episode in the Star Wars Trilogy."
type Episode {
  "The id of the episode."
  id: String!

  "The title of the episode."
  title: String

  "The description of the episode."
  description: String
}

"A character in the Star Wars Trilogy"
interface Character {
  "The id of the character."
  id: String!

  "The species of the character."
  species: String!

  "The name of the character."
  name: String

  "The friends of the character, or an empty list if they have none."
  friends(
    "The species of the friends."
    species: Species
  ): [Character]!

  "Which movies they appear in."
  appearsIn: [Episode]
}

"A humanoid creature in the Star Wars universe."
type Human implements Character {
  "The id of the human."
  id: String!

  "The species of the human."
  species: String!

  "The name of the human."
  name: String

  "The friends of the human, or an empty list if they have none."
  friends(
    "The species of the friends."
    species: Species
  ): [Character]!

  "Which movies they appear in."
  appearsIn: [Episode]!

  "The home planet of the human, or null if unknown."
  homePlanet: String
}

"A mechanical creature in the Star Wars universe."
type Droid implements Character {
  "The id of the droid."
  id: String!

  "The species of the droid."
  species: String!

  "The name of the droid."
  name: String

  "The friends of the droid, or an empty list if they have none."
  friends(
    "The species of the friends."
    species: Species
  ): [Character]!

  "Which movies they appear in."
  appearsIn: [Episode]!

  "The primary function of the droid."
  primaryFunction: String
}

type Query {
  hero(
    """
    If omitted, returns the hero of the whole saga.
    If provided, returns the hero of that particular episode.
    """
    episode: String
  ): Character

  human(
    "ID of the human."
    id: String!
  ): Human

  droid(
    "ID of the droid."
    id: String!
  ): Droid
}

schema {
  query: Query
}
